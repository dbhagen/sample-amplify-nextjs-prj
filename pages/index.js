import React, { useState, useEffect } from 'react'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import Link from 'next/link'
import { Auth, withSSRContext, DataStore } from 'aws-amplify'
import { TestModel } from '../src/models'
import { serializeModel, deserializeModel } from '@aws-amplify/datastore/ssr'

export async function getServerSideProps ({ req }) {
  const SSR = withSSRContext({ req })
  const { Auth } = SSR
  let testModelData
  console.log('SSR User before currentAuthenticatedUser()', await Auth.user)
  try {
    // await Auth.currentAuthenticatedUser()
  } catch (err) {
    console.error('SSR User Authentication error', err)
  }
  console.log('SSR User after currentAuthenticatedUser()', await Auth.user)
  try {
    testModelData = await SSR.DataStore.query(TestModel)
  } catch (err) {
    console.error('SSR TestModel Query error', err)
  }
  console.log('SSR TestModel Data', testModelData)
  return {
    props: {
      SSRTestModelData: serializeModel(testModelData),
      SSRuser: (Auth.user && Auth.user.username) ? Auth.user.username : 'null'
    }
  }
}

export default function Home (context) {
  const { SSRTestModelData, SSRuser } = context
  const [user, setUser] = useState()
  const [_isAdmin, setIsAdmin] = useState(false)
  const [TestModelData, _setTestModelData] = useState(deserializeModel(TestModel, SSRTestModelData))
  let ClientsideTestModelData

  useEffect(() => {
    const getUser = async () => {
      try {
        // eslint-disable-next-line no-shadow
        const user = await Auth.currentAuthenticatedUser()
        console.log('Client-side User:', user)
        setUser(user)
        setIsAdmin(!!(user.signInUserSession.accessToken.payload['cognito:groups']?.includes('Admin')))
        console.log('SSRTestModelData', TestModelData)
        ClientsideTestModelData = await DataStore.query(TestModel)
        console.log('ClientsideTestModelData', ClientsideTestModelData)
      } catch (err) {
        console.error(err)
      }
    }
    getUser()
  }, [])

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div>
          <p>Test App</p>
          <Link href="/sign-in">Sign In/Profile</Link>
          <div>SSRUser: {SSRuser}</div>
          <div>Client-side User: {user && user.username && user.username}</div>
          <div>SSR TestModel: <pre>{SSRTestModelData}</pre></div>
          <div>Client-side TestModel: <pre>{ClientsideTestModelData}</pre></div>
          <div><button type='button' onClick={async () => {
            const randStr = Math.random().toString(16).substr(2, 8)
            await DataStore.save(new TestModel({ name: randStr }))
          }
          }>Create data</button></div>
        </div>
      </main>

      <footer className={styles.footer}>
      </footer>
    </div>
  )
}
